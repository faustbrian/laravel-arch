{
    "created": {
        "app\/Nova\/Lenses\/MostValuableUsers.php": "<?php\n\nnamespace App\\Nova\\Lenses;\n\nuse Laravel\\Nova\\Fields\\ID;\nuse Laravel\\Nova\\Fields\\Text;\nuse Laravel\\Nova\\Http\\Requests\\LensRequest;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\nuse Laravel\\Nova\\Lenses\\Lens;\nuse Laravel\\Nova\\Nova;\n\nclass MostValuableUsers extends Lens\n{\n    \/**\n     * The columns that should be searched.\n     *\n     * @var array\n     *\/\n    public static $search = [];\n\n    \/**\n     * Get the query builder \/ paginator for the lens.\n     *\n     * @param  \\Laravel\\Nova\\Http\\Requests\\LensRequest  $request\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n     * @return mixed\n     *\/\n    public static function query(LensRequest $request, $query)\n    {\n        return $request->withOrdering($request->withFilters(\n            $query\n        ));\n    }\n\n    \/**\n     * Get the fields available to the lens.\n     *\n     * @param  \\Laravel\\Nova\\Http\\Requests\\NovaRequest  $request\n     * @return array\n     *\/\n    public function fields(NovaRequest $request)\n    {\n        return [\n            ID::make(Nova::__('ID'), 'id')->sortable(),\n        ];\n    }\n\n    \/**\n     * Get the cards available on the lens.\n     *\n     * @param  \\Laravel\\Nova\\Http\\Requests\\NovaRequest  $request\n     * @return array\n     *\/\n    public function cards(NovaRequest $request)\n    {\n        return [];\n    }\n\n    \/**\n     * Get the filters available for the lens.\n     *\n     * @param  \\Laravel\\Nova\\Http\\Requests\\NovaRequest  $request\n     * @return array\n     *\/\n    public function filters(NovaRequest $request)\n    {\n        return [];\n    }\n\n    \/**\n     * Get the actions available on the lens.\n     *\n     * @param  \\Laravel\\Nova\\Http\\Requests\\NovaRequest  $request\n     * @return array\n     *\/\n    public function actions(NovaRequest $request)\n    {\n        return parent::actions($request);\n    }\n\n    \/**\n     * Get the URI key for the lens.\n     *\n     * @return string\n     *\/\n    public function uriKey()\n    {\n        return 'uri-key';\n    }\n}\n"
    },
    "deleted": [],
    "updated": []
}