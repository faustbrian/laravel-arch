{
    "created": {
        "app\/Models\/User.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOne;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphOne;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\n\nclass User extends Model\n{\n    use HasFactory;\n\n    \/**\n     * The attributes that are mass assignable.\n     *\n     * @var array<string>\n     *\/\n    protected $fillable = ['name' ,'mail'];\n\n    public function comments(): HasMany\n    {\n        return $this->hasMany(Comment::class);\n    }\n\n    public function deployments(): HasManyThrough\n    {\n        return $this->hasManyThrough(Deployment::class, Environment::class);\n    }\n\n    public function owner(): HasOneThrough\n    {\n        return $this->hasOneThrough(Owner::class, Car::class);\n    }\n\n    public function comments(): BelongsToMany\n    {\n        return $this->belongsToMany(Comment::class);\n    }\n\n    public function comment(): HasOne\n    {\n        return $this->hasOne(Comment::class);\n    }\n\n    public function comment(): BelongsTo\n    {\n        return $this->belongsTo(Comment::class);\n    }\n\n    public function image(): MorphOne\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n\n    public function comment(): MorphTo\n    {\n        return $this->morphTo('Comment');\n    }\n\n    public function comments(): MorphMany\n    {\n        return $this->morphMany(Comment::class, 'commentable');\n    }\n\n    public function tags(): MorphToMany\n    {\n        return $this->morphToMany(Tag::class, 'taggable');\n    }\n\n    public function posts(): MorphToMany\n    {\n        return $this->morphedByMany(Post::class, 'taggable');\n    }\n}\n"
    },
    "deleted": [],
    "updated": []
}