created:
    app/Http/Controllers/PostController.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\n\nclass PostController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct()\n    {\n                $this->authorizeResource(Post::class);\n\n    }\n\n    //\n}\n"
    app/Http/Controllers/CommentController.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\n\nclass CommentController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct()\n    {\n                $this->authorizeResource(Comment::class);\n\n    }\n\n    //\n}\n"
    tests/Feature/Http/Controllers/PostControllerTest.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace Tests\\Feature\\Http\\Controllers;\n\n//\n"
    tests/Feature/Http/Controllers/CommentControllerTest.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace Tests\\Feature\\Http\\Controllers;\n\n//\n"
    database/factories/PostFactory.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace Database\\Factories;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\nuse Illuminate\\Support\\Str;\n\n/**\n * @extends \\Illuminate\\Database\\Eloquent\\Factories\\Factory<\\App\\Models\\Post>\n */\nclass PostFactory extends Factory\n{\n    /**\n     * Define the model's default state.\n     *\n     * @return array<string, mixed>\n     */\n    public function definition(): array\n    {\n        return [\n            'big_increments' => fake()->word,\n            'big_integer' => fake()->numberBetween(-100000, 100000),\n            'binary' => fake()->sha256,\n            'boolean' => fake()->boolean,\n            'char' => fake()->randomLetter,\n            'date_time_tz' => fake()->dateTime(),\n            'date_time' => fake()->dateTime(),\n            'date' => fake()->date(),\n            'decimal' => fake()->randomFloat(0, 0, 9999999999.),\n            'double' => fake()->randomFloat(0, 0, 9999999999.),\n            'enum' => fake()->randomElement(/** enum_attributes **/),\n            'float' => fake()->randomFloat(0, 0, 9999999999.),\n            'foreign_id' => fake()->word,\n            'foreign_id_for' => fake()->word,\n            'foreign_ulid' => fake()->word,\n            'foreign_uuid' => fake()->word,\n            'geometry_collection' => fake()->word,\n            'geometry' => fake()->word,\n            'increments' => fake()->word,\n            'integer' => fake()->numberBetween(-10000, 10000),\n            'ip_address' => fake()->ipv4,\n            'json' => {},\n            'jsonb' => {},\n            'line_string' => fake()->word,\n            'long_text' => fake()->text,\n            'mac_address' => fake()->macAddress,\n            'medium_increments' => fake()->word,\n            'medium_integer' => fake()->numberBetween(-10000, 10000),\n            'medium_text' => fake()->text,\n            'morphs_id' => fake()->randomDigitNotNull,\n            'morphs_type' => fake()->word,\n            'multi_line_string' => fake()->word,\n            'multi_point' => fake()->word,\n            'multi_polygon' => fake()->word,\n            'point' => fake()->word,\n            'polygon' => fake()->word,\n            'remember_token' => Str::random(10),\n            'set' => fake()->randomElement(/** set_attributes **/),\n            'small_increments' => fake()->word,\n            'small_integer' => fake()->numberBetween(-1000, 1000),\n            'soft_deletes_tz' => fake()->word,\n            'soft_deletes' => fake()->word,\n            'string' => fake()->word,\n            'text' => fake()->text,\n            'time_tz' => fake()->time(),\n            'time' => fake()->time(),\n            'timestamp_tz' => fake()->dateTime(),\n            'timestamp' => fake()->dateTime(),\n            'timestamps_tz' => fake()->word,\n            'tiny_increments' => fake()->word,\n            'tiny_integer' => fake()->numberBetween(-8, 8),\n            'tiny_text' => fake()->word,\n            'unsigned_big_integer' => fake()->randomNumber(),\n            'unsigned_decimal' => fake()->randomNumber(),\n            'unsigned_integer' => fake()->randomNumber(),\n            'unsigned_medium_integer' => fake()->randomNumber(),\n            'unsigned_small_integer' => fake()->randomNumber(),\n            'unsigned_tiny_integer' => fake()->randomDigitNotNull,\n            'ulid_morphs' => fake()->word,\n            'uuid_morphs' => fake()->word,\n            'ulid' => fake()->word,\n            'uuid' => fake()->uuid,\n            'year' => fake()->year(),\n        ];\n    }\n}\n"
    database/factories/CommentFactory.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace Database\\Factories;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\n/**\n * @extends \\Illuminate\\Database\\Eloquent\\Factories\\Factory<\\App\\Models\\Comment>\n */\nclass CommentFactory extends Factory\n{\n    /**\n     * Define the model's default state.\n     *\n     * @return array<string, mixed>\n     */\n    public function definition(): array\n    {\n        return [\n            'body' => fake()->regexify('[A-Za-z0-9]{140}'),\n        ];\n    }\n}\n"
    app/Http/Requests/StorePostRequest.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass StorePostRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return false;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, array|\\Illuminate\\Contracts\\Validation\\ValidationRule|string>\n     */\n    public function rules(): array\n    {\n        return [\n            //\n        ];\n    }\n}\n"
    app/Http/Requests/UpdatePostRequest.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UpdatePostRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return false;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, array|\\Illuminate\\Contracts\\Validation\\ValidationRule|string>\n     */\n    public function rules(): array\n    {\n        return [\n            //\n        ];\n    }\n}\n"
    app/Http/Requests/StoreCommentRequest.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass StoreCommentRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return false;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, array|\\Illuminate\\Contracts\\Validation\\ValidationRule|string>\n     */\n    public function rules(): array\n    {\n        return [\n            //\n        ];\n    }\n}\n"
    app/Http/Requests/UpdateCommentRequest.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UpdateCommentRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return false;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, array|\\Illuminate\\Contracts\\Validation\\ValidationRule|string>\n     */\n    public function rules(): array\n    {\n        return [\n            //\n        ];\n    }\n}\n"
    database/migrations/2023_01_01_000000_create_posts_table.php: "<?php\n\ndeclare(strict_types=1);\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class() extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('posts', function (Blueprint $table): void {\n            $table->id()->foreign();\n            $table->bigIncrements('big_increments');\n            $table->bigInteger('big_integer');\n            $table->binary('binary');\n            $table->boolean('boolean');\n            $table->char('char');\n            $table->dateTimeTz('date_time_tz');\n            $table->dateTime('date_time');\n            $table->date('date');\n            $table->decimal('decimal');\n            $table->double('double');\n            $table->enum('enum');\n            $table->float('float');\n            $table->foreignId('foreign_id');\n            $table->foreignIdFor('foreign_id_for');\n            $table->foreignUlid('foreign_ulid');\n            $table->foreignUuid('foreign_uuid');\n            $table->geometryCollection('geometry_collection');\n            $table->geometry('geometry');\n            $table->id();\n            $table->increments('increments');\n            $table->integer('integer');\n            $table->ipAddress('ip_address');\n            $table->json('json');\n            $table->jsonb('jsonb');\n            $table->lineString('line_string');\n            $table->longText('long_text');\n            $table->macAddress('mac_address');\n            $table->mediumIncrements('medium_increments');\n            $table->mediumInteger('medium_integer');\n            $table->mediumText('medium_text');\n            $table->morphs('morphs');\n            $table->multiLineString('multi_line_string');\n            $table->multiPoint('multi_point');\n            $table->multiPolygon('multi_polygon');\n            $table->nullableMorphs('nullable_morphs');\n            $table->nullableTimestamps('nullable_timestamps');\n            $table->nullableUlidMorphs('nullable_ulid_morphs');\n            $table->nullableUuidMorphs('nullable_uuid_morphs');\n            $table->point('point');\n            $table->polygon('polygon');\n            $table->rememberToken();\n            $table->set('set');\n            $table->smallIncrements('small_increments');\n            $table->smallInteger('small_integer');\n            $table->softDeletesTz('soft_deletes_tz');\n            $table->softDeletes('soft_deletes');\n            $table->string('string');\n            $table->text('text');\n            $table->timeTz('time_tz');\n            $table->time('time');\n            $table->timestampTz('timestamp_tz');\n            $table->timestamp('timestamp');\n            $table->timestampsTz('timestamps_tz');\n            $table->timestamps();\n            $table->tinyIncrements('tiny_increments');\n            $table->tinyInteger('tiny_integer');\n            $table->tinyText('tiny_text');\n            $table->unsignedBigInteger('unsigned_big_integer');\n            $table->unsignedDecimal('unsigned_decimal');\n            $table->unsignedInteger('unsigned_integer');\n            $table->unsignedMediumInteger('unsigned_medium_integer');\n            $table->unsignedSmallInteger('unsigned_small_integer');\n            $table->unsignedTinyInteger('unsigned_tiny_integer');\n            $table->ulidMorphs('ulid_morphs');\n            $table->uuidMorphs('uuid_morphs');\n            $table->ulid('ulid');\n            $table->uuid('uuid');\n            $table->year('year');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('posts');\n    }\n};\n"
    database/migrations/2023_01_01_000001_create_comments_table.php: "<?php\n\ndeclare(strict_types=1);\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class() extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('comments', function (Blueprint $table): void {\n            $table->string('body', 140);\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('comments');\n    }\n};\n"
    database/migrations/2023_01_01_000002_create_comment_post_table.php: "<?php\n\ndeclare(strict_types=1);\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class() extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('comment_post', function (Blueprint $table): void {\n            $table->unsignedBigInteger('comment_id');\n            $table->foreignId('comment_id')->constrained()->references('id')->on('comments')->cascadeOnUpdate()->cascadeOnDelete();\n            $table->unsignedBigInteger('post_id');\n            $table->foreignId('post_id')->constrained()->references('id')->on('posts')->cascadeOnUpdate()->cascadeOnDelete();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('comment_post');\n    }\n};\n"
    database/migrations/2023_01_01_000003_create_tagables_table.php: "<?php\n\ndeclare(strict_types=1);\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class() extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('tagables', function (Blueprint $table): void {\n            $table->unsignedBigInteger('tag_id');\n            $table->morphs('tagable');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('tagables');\n    }\n};\n"
    app/Models/Post.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    use HasFactory;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<string>\n     */\n    protected $fillable = ['user_id' ,'big_increments' ,'big_integer' ,'binary' ,'boolean' ,'char' ,'date_time_tz' ,'date_time' ,'date' ,'decimal' ,'double' ,'enum' ,'float' ,'foreign_id' ,'foreign_id_for' ,'foreign_ulid' ,'foreign_uuid' ,'geometry_collection' ,'geometry' ,'id' ,'increments' ,'integer' ,'ip_address' ,'json' ,'jsonb' ,'line_string' ,'long_text' ,'mac_address' ,'medium_increments' ,'medium_integer' ,'medium_text' ,'morphs' ,'multi_line_string' ,'multi_point' ,'multi_polygon' ,'nullable_morphs' ,'nullable_timestamps' ,'nullable_ulid_morphs' ,'nullable_uuid_morphs' ,'point' ,'polygon' ,'remember_token' ,'set' ,'small_increments' ,'small_integer' ,'soft_deletes_tz' ,'soft_deletes' ,'string' ,'text' ,'time_tz' ,'time' ,'timestamp_tz' ,'timestamp' ,'timestamps_tz' ,'timestamps' ,'tiny_increments' ,'tiny_integer' ,'tiny_text' ,'unsigned_big_integer' ,'unsigned_decimal' ,'unsigned_integer' ,'unsigned_medium_integer' ,'unsigned_small_integer' ,'unsigned_tiny_integer' ,'ulid_morphs' ,'uuid_morphs' ,'ulid' ,'uuid' ,'year'];\n}\n"
    app/Models/Comment.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOne;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphOne;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\n\nclass Comment extends Model\n{\n    use HasFactory;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<string>\n     */\n    protected $fillable = ['body'];\n\n    public function ratings(): HasMany\n    {\n        return $this->hasMany(Rating::class);\n    }\n\n    public function deployments(): HasManyThrough\n    {\n        return $this->hasManyThrough(Deployment::class, Environment::class);\n    }\n\n    public function owner(): HasOneThrough\n    {\n        return $this->hasOneThrough(Owner::class, Car::class);\n    }\n\n    public function posts(): BelongsToMany\n    {\n        return $this->belongsToMany(Post::class);\n    }\n\n    public function user(): HasOne\n    {\n        return $this->hasOne(User::class);\n    }\n\n    public function post(): BelongsTo\n    {\n        return $this->belongsTo(Post::class);\n    }\n\n    public function image(): MorphOne\n    {\n        return $this->morphOne(Image::class, 'imageable');\n    }\n\n    public function author(): MorphTo\n    {\n        return $this->morphTo('author');\n    }\n\n    public function images(): MorphMany\n    {\n        return $this->morphMany(Image::class, 'imageable');\n    }\n\n    public function tags(): MorphToMany\n    {\n        return $this->morphToMany(Tag::class, 'taggable');\n    }\n\n    public function tags(): MorphToMany\n    {\n        return $this->morphedByMany(Tag::class, 'taggable');\n    }\n}\n"
    tests/Unit/Models/PostTest.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace Tests\\Unit\\Models;\n\nuse App\\Models\\Post;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nit('should extend the eloquent model', function (): void {\n    $model = new Post();\n\n    expect($model)->toBeInstanceOf(Model::class);\n});\n"
    tests/Unit/Models/CommentTest.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace Tests\\Unit\\Models;\n\nuse App\\Models\\Comment;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nit('should extend the eloquent model', function (): void {\n    $model = new Comment();\n\n    expect($model)->toBeInstanceOf(Model::class);\n});\n"
    app/Policies/PostPolicy.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse App\\Models\\User;\n\nclass PostPolicy\n{\n    /**\n     * Determine whether the user can view any models.\n     */\n    public function viewAny(User $user): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can view the model.\n     */\n    public function view(User $user, Post $post): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can create models.\n     */\n    public function create(User $user): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can update the model.\n     */\n    public function update(User $user, Post $post): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can delete the model.\n     */\n    public function delete(User $user, Post $post): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can restore the model.\n     */\n    public function restore(User $user, Post $post): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can permanently delete the model.\n     */\n    public function forceDelete(User $user, Post $post): bool\n    {\n        //\n    }\n}\n"
    app/Policies/CommentPolicy.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Policies;\n\nuse App\\Models\\Comment;\nuse App\\Models\\User;\n\nclass CommentPolicy\n{\n    /**\n     * Determine whether the user can view any models.\n     */\n    public function viewAny(User $user): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can view the model.\n     */\n    public function view(User $user, Comment $comment): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can create models.\n     */\n    public function create(User $user): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can update the model.\n     */\n    public function update(User $user, Comment $comment): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can delete the model.\n     */\n    public function delete(User $user, Comment $comment): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can restore the model.\n     */\n    public function restore(User $user, Comment $comment): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can permanently delete the model.\n     */\n    public function forceDelete(User $user, Comment $comment): bool\n    {\n        //\n    }\n}\n"
    app/Http/Resources/PostResource.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass PostResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n"
    app/Http/Resources/CommentResource.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass CommentResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n"
    database/seeders/PostSeeder.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace Database\\Seeders;\n\n// use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\nuse Illuminate\\Database\\Seeder;\n\nclass PostSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run(): void\n    {\n        //\n    }\n}\n"
    database/seeders/CommentSeeder.php: "<?php\n\ndeclare(strict_types=1);\n\nnamespace Database\\Seeders;\n\n// use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\nuse Illuminate\\Database\\Seeder;\n\nclass CommentSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run(): void\n    {\n        //\n    }\n}\n"
deleted: {  }
updated: {  }
