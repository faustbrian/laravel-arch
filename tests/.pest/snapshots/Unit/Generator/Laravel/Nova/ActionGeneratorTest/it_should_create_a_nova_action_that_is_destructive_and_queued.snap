{
    "created": {
        "app\/Nova\/Actions\/DeleteUserData.php": "<?php\n\nnamespace App\\Nova\\Actions;\n\nuse Illuminate\\Bus\\Batchable;\nuse Illuminate\\Bus\\PendingBatch;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Support\\Collection;\nuse Laravel\\Nova\\Actions\\DestructiveAction;\nuse Laravel\\Nova\\Contracts\\BatchableAction;\nuse Laravel\\Nova\\Fields\\ActionFields;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\n\nclass DeleteUserData extends DestructiveAction implements ShouldQueue\n{\n    use Batchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    \/**\n     * Perform the action on the given models.\n     *\n     * @param  \\Laravel\\Nova\\Fields\\ActionFields  $fields\n     * @param  \\Illuminate\\Support\\Collection  $models\n     * @return mixed\n     *\/\n    public function handle(ActionFields $fields, Collection $models)\n    {\n        \/\/\n    }\n\n    \/**\n     * Get the fields available on the action.\n     *\n     * @param  \\Laravel\\Nova\\Http\\Requests\\NovaRequest  $request\n     * @return array\n     *\/\n    public function fields(NovaRequest $request)\n    {\n        return [];\n    }\n\n    \/**\n     * Register `then`, `catch` and `finally` event on batchable job.\n     *\n     * @param  \\Laravel\\Nova\\Fields\\ActionFields  $fields\n     * @param  \\Illuminate\\Bus\\PendingBatch  $batch\n     * @return void\n     *\/\n    public function withBatch(ActionFields $fields, PendingBatch $batch)\n    {\n        \/\/\n    }\n}\n"
    },
    "deleted": [],
    "updated": []
}