created:
    app/Models/User.php: |
        <?php

        declare(strict_types=1);

        namespace App\Models;

        use Illuminate\Database\Eloquent\Factories\HasFactory;
        use Illuminate\Database\Eloquent\Model;
        use Illuminate\Database\Eloquent\Relations\BelongsTo;
        use Illuminate\Database\Eloquent\Relations\BelongsToMany;
        use Illuminate\Database\Eloquent\Relations\HasMany;
        use Illuminate\Database\Eloquent\Relations\HasManyThrough;
        use Illuminate\Database\Eloquent\Relations\HasOne;
        use Illuminate\Database\Eloquent\Relations\HasOneThrough;
        use Illuminate\Database\Eloquent\Relations\MorphMany;
        use Illuminate\Database\Eloquent\Relations\MorphOne;
        use Illuminate\Database\Eloquent\Relations\MorphTo;
        use Illuminate\Database\Eloquent\Relations\MorphToMany;

        class User extends Model
        {
            use HasFactory;

            /**
             * The attributes that are mass assignable.
             *
             * @var array<string>
             */
            protected $fillable = ['name' ,'mail'];

            public function comments(): HasMany
            {
                return $this->hasMany(Comment::class);
            }

            public function deployments(): HasManyThrough
            {
                return $this->hasManyThrough(Deployment::class, Environment::class);
            }

            public function owner(): HasOneThrough
            {
                return $this->hasOneThrough(Owner::class, Car::class);
            }

            public function comments(): BelongsToMany
            {
                return $this->belongsToMany(Comment::class);
            }

            public function comment(): HasOne
            {
                return $this->hasOne(Comment::class);
            }

            public function comment(): BelongsTo
            {
                return $this->belongsTo(Comment::class);
            }

            public function image(): MorphOne
            {
                return $this->morphOne(Image::class, 'imageable');
            }

            public function comment(): MorphTo
            {
                return $this->morphTo('Comment');
            }

            public function comments(): MorphMany
            {
                return $this->morphMany(Comment::class, 'commentable');
            }

            public function tags(): MorphToMany
            {
                return $this->morphToMany(Tag::class, 'taggable');
            }

            public function posts(): MorphToMany
            {
                return $this->morphedByMany(Post::class, 'taggable');
            }
        }
deleted: {  }
updated: {  }
